#include "NumericalMethods.h"
#include <iostream>

float* NumericalMethods::Gauss(float A[20][20], float* b, int P)
{
	float l[20], t[20];				// arr - заданная матрица коэффициентов, b - вектор свободных коэффициентов
	float* x = new float[3] {};
	float d, sum;

	// прямой ход Гаусса

	for (int k = 0; k < P; k++)
	{
		// проверка на нулевой элемент в k-ом столбце

		if (A[k][k] == 0 and k < P - 1)
		{
			for (int m = 0; m < P; m++)
			{
				l[m] = A[k][m];								// записывает значения строки с нулевым элементом в другой вектор
			}
			t[k] = b[k];
			for (int j = 0; j < P; j++)
			{
				A[k][j] = A[k + 1][j];						// перезаписываем значения строки k строкой k+1
				A[k + 1][j] = l[j];							// перезаписываем значения строки k+1 строкой k
			}
			b[k] = b[k + 1];									// аналогично меняем местами
			b[k + 1] = t[k];									// значения свободных коэффициентов
		}

		// непосредственно сам прямой ход

		for (int i = k + 1; i < P; i++)
		{
			d = A[i][k] / A[k][k];							// коэффициент, на который домножается строка, чтобы другая строка обнулилась
			for (int j = k; j < P; j++)
			{
				A[i][j] = A[i][j] - d * A[k][j];			// вычитание строк
			}
			b[i] = b[i] - d * b[k];								// преобразование вектора свободных коэффициентов
		}
	}

	// выводим преобразованную матрицу

	std::cout << "Треугольная матрица: \n";
	for (int i = 0; i < P; i++)
	{
		for (int j = 0; j < P; j++)
		{
			std::cout << A[i][j] << "    ";
		}
		std::cout << "\n";
	}
	std::cout << "\n\n\n";

	// выведем вектор преобразованных свободных коэффициентов

	std::cout << "Вектор преобразованных свободных коэффициентов" << std::endl;
	for (int i = 0; i < P; i++)
	{
		std::cout << b[i] << "    ";
	}
	std::cout << "\n\n\n";

	// обратный ход

	for (int k = P - 1; k >= 0; k--)
	{
		sum = 0;
		for (int i = k + 1; i < P; i++)
		{
			sum += A[k][i] * x[i];					// находим сумму произведений коэффициента на найденный в предыдущем ходу x[k]
		}
		if (A[k][k] != 0)
		{
			x[k] = (b[k] - sum) / A[k][k];			// находим х[k] по общей формуле
		}
		else
		{
			x[k] = 0;
		}
	}

	// выводим решение СЛАУ

	std::cout << "Ответ: \n\n\n";

	for (int i = 0; i < P; i++)
	{
		std::cout << "x" << i + 1 << " =    " << x[i] << std::endl;
	}

	return x;
}
